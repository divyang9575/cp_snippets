class Node {
    public:
    Node * links[26] ;
    bool isEnd = false ;
    Node(){
        for (int i = 0; i < 26; i++) links[i] = NULL;
    }
};

class Trie {
    public:
    Node *root;
    Trie () {
        root = new Node() ;
    }

    void insert_string (string &S) {
        Node *cur = root ;
        for (int i = 0; i < S.size(); i++) {
            if(cur->links[S[i]-'a'] == NULL) {
                cur->links[S[i]-'a'] = new Node() ;
            }
            cur = cur->links[S[i]-'a'] ;
        }
        cur->isEnd = true ;
    }

    bool search_string (string &word) {
        Node *cur = root ;
        for (char c : word) {
            if(cur->links[c-'a'] == NULL)
                return false ;
            cur = cur->links[c-'a'] ;
        }
        return cur->isEnd ; // change if searching for prefix
    }
};
