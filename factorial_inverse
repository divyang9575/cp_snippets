const int N = 3e5 + 5;
const int mod = 1e9 + 7;
int inv[N];
int fact[N];
long long binpow(long long a, long long b, long long m) {
    a %= m;
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}

void factorial(){
    fact[0] = 1 ;
    for(int i=1; i<N; i++){
        fact[i] = (fact[i-1] *1LL* i) % mod ;
    }
}
void inverse(){    // fermat's little theorum
    for(int i=1; i<N; i++){
        inv[i] = binpow(fact[i], mod-2, mod);
    }
}
int C(int n, int k) {
	if(k > n) return 0;
	int ans = 1ll * fact[n] * inv[k] % mod ;
	ans = 1ll * ans * inv[n - k] % mod ;
	return ans ;
}
